class Solution {
public:
    string longestPalindrome(string s) ;
};

string Solution:: longestPalindrome(string s) {

    int start = 0;
    int maxlen = 0;
    const int n = s.size();
    //vector<vector<bool>> f(s.size(), vector<bool>(s.size(), false));
    bool f[n][n];
    fill_n(&f[0][0], n*n, false);
    for(int i=n-1;i>=0;i--){
        f[i][i] = true;
        for(int j=i+1;j<n;j++){
            if(j==i+1){
                f[i][j]=s[i]==s[j];
                continue;
            }
            f[i][j] = f[i+1][j-1] && s[i]==s[j];
        }
    }
    
    for(int i=0;i<n;i++){
        for(int j=n-1;j>=i;j--){
            if(f[i][j]){
                if(j-i+1>maxlen){
                    start = i;
                    maxlen = j-i+1;
                }
                break;
            }
        }
    }
    return s.substr(start,maxlen);
}

