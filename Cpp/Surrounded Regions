class Solution {
public:
    void solve(vector<vector<char>> &board);
};

void solve_bfs(vector<vector<char>> & b, int i, int j){
    const size_t n = b.size();
    const size_t m = b[0].size();
    queue<pair<int, int>>  q;
    
    auto isValid = [&] (pair<int, int> &index){
        int i = index.first, j = index.second;
        if(i<0 || i>=n || j<0 || j>=m || b[i][j] != 'O') return false;
        return true;
    };
    
    auto next = [&](pair<int, int>&index){
        int i = index.first, j = index.second;
        vector<pair<int, int>> res;
        
        pair<int, int> newindex [4] = {{i+1,j},{i-1,j},{i,j+1},{i,j-1}};
        
        for(int k=0;k<4;k++){
            if(isValid(newindex[k])){
                b[newindex[k].first][newindex[k].second] = '+';
                res.push_back(newindex[k]);
            }
        }
    
        return res;
    };
    
    pair<int, int> index = {i,j};
    
    if(isValid(index)){
        b[i][j] = '+';
        q.push(index);
    }
    
    while(!q.empty()){
        auto cur = q.front();
        q.pop();
        auto newindex = next(cur);
        for(auto s:newindex) q.push(s);
    }
}

void Solution::solve(vector<vector<char>> &board){

    
    if(board.empty()) return;
    const size_t n = board.size();
    const size_t m = board[0].size();
    
    for(int i=0;i<n;i++){
        solve_bfs(board, i, 0);
        solve_bfs(board, i, m-1);

    }
    
    for(int j=1;j<m-1;j++){
        solve_bfs(board, 0, j);
        solve_bfs(board, n-1, j);
        
    }
    
    for(int i=0; i<n;i++){
        for(int j=0;j<m;j++){
            if(board[i][j]=='O') board[i][j] = 'X';
            else if(board[i][j] == '+') board[i][j] = 'O';
        }
    }
    
}

