class Solution {
public:
    vector<string> letterCombinations(string digits);
};

void letter_DFS(vector<string> &res, unordered_map<char, string>&tel,  string &path, const string & digits, int level){
    if(level==digits.size()){
        res.push_back(path);
        return;
    }
    
    if(tel.find(digits[level])==tel.end()){
        letter_DFS(res, tel, path, digits, level+1);
    }
    else{
        for(char c:tel[digits[level]]){
            path.push_back(c);
            letter_DFS(res, tel, path, digits, level+1);
            path.pop_back();
        }
    }
}

vector<string> Solution:: letterCombinations(string digits) {
    unordered_map<char, string> tel;
    tel['2'] = "abc";
    tel['3'] = "def";
    tel['4'] = "ghi";
    tel['5'] = "jkl";
    tel['6'] = "mno";
    tel['7'] = "pqrs";
    tel['8'] = "tuv";
    tel['9'] = "wxyz";
    
    string path;
    vector<string> res;
    letter_DFS(res, tel, path, digits, 0);
    return res;
}
