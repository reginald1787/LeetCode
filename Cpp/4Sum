class Solution {
public:
    vector<vector<int> > fourSum(vector<int> &num, int target);
};

vector<vector<int> > Solution:: fourSum(vector<int> &num, int target) {
    vector<vector<int>> results;
    if(num.size()<4) return results;
    sort(num.begin(),num.end());
    unordered_map<int, vector<pair<int,int>>> cache;
    for(int i=0;i<num.size();i++){
        for(int j=i+1;j<num.size();j++){
            cache[num[i]+num[j]].push_back(pair<int,int>(i,j));
        }
    }
    
    for(int i=0;i<num.size();i++){
        for(int j=i+1;j<num.size();j++){
            int key = target - num[i] -num[j];
            if(cache.find(key)==cache.end()) continue;
            auto vec = cache[key];
            for(int k=0;k<vec.size();k++){
                if(i<=vec[k].second) continue;
                results.push_back({num[vec[k].first],num[vec[k].second],num[i],num[j]});
            }
        }
        
    }
    
    sort(results.begin(),results.end());
    results.erase(unique(results.begin(), results.end()), results.end());
    return results;

};
