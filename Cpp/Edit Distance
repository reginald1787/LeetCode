class Solution {
public:
    int minDistance(string word1, string word2);
};

int Solution:: minDistance(string word1, string word2) {
    size_t n1 = word1.size();
    size_t n2 = word2.size();
    
    if(n1==0 || n2==0) return n1==0?n2:n1;
    
    auto three_min = [&](int a, int b, int c){
        return a>b?min(b,c):min(a,c);
    };
    
    vector<vector<int>> f(n1, vector<int>(n2, 0));
    f[0][0] = word1[0]==word2[0]?0:1;
    for(int i=1;i<n1;i++) f[i][0] = word1[i]==word2[0]?i:1+f[i-1][0];
    for(int j=1;j<n2;j++) f[0][j] = word1[0]==word2[j]?j:1+f[0][j-1];

    for(int i=1;i<n1;i++){
        for(int j=1;j<n2;j++){
            if(word1[i]==word2[j]) f[i][j] = f[i-1][j-1];
            else f[i][j] = 1 + three_min(f[i-1][j],f[i][j-1], f[i-1][j-1]);
        }
    }
    
    return f[n1-1][n2-1];
}


