class Solution {
public:

    void dfs(vector<int> &candidates, vector<vector<int>> &res, vector<int> &path, int start, int target){
        if(target<0) return;
        if(target==0){
            res.push_back(path);
            return;
        }
        
        for(int i=start;i<candidates.size();i++){
            path.push_back(candidates[i]);
            dfs(candidates, res, path, i, target-candidates[i]);
            path.pop_back();
        }
    }
    
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        vector<vector<int>> res;
        vector<int> path;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, res, path, 0, target);
        return res;

    }
};
