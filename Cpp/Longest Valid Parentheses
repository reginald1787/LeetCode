class Solution {
public:
    int longestValidParentheses(string s);
};

int Solution:: longestValidParentheses(string s) {

    stack<int> p;
    int currlen = 0;
    int maxlen = 0;
    
    for(int i=0;i<s.size();i++){
        switch (s[i]) {
            case '(':
                p.push(i);
                break;
            case ')':
                if(p.empty()) currlen=0;
                else{
                    int left = p.top();
                    p.pop();
                    int leftlen = i-left+1;
                    
                    if(p.empty()) currlen+=leftlen,leftlen = currlen;
                    else leftlen = i-p.top();
                    
                    maxlen = max(maxlen,leftlen);
                }
                break;
            default:
                break;
        }
    }
    
    return maxlen;
}

