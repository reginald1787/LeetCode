/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) ;
};


RandomListNode * Solution::  copyRandomList(RandomListNode *head) {
    
    if(!head) return nullptr;
    RandomListNode * p = head;
    while(p){
        RandomListNode * newnode = new RandomListNode (p->label);
        newnode->next = p->next;
        p->next = newnode;
        p = p->next->next;
    }
    
    p = head;
    while(p){
        p->next->random = !p->random? nullptr:p->random->next;
        p = p->next->next;
    }
    
    RandomListNode * newhead = head->next;
    p = head;
    RandomListNode * q = newhead;
    while(p && q){
        p->next = q->next;
        q->next = !q->next? nullptr:q->next->next;
        p = p->next;
        q = q->next;
    }
    
    return newhead;
    
}
