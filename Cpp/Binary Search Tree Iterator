/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {

private:
    
    stack<int> parent;
    void reverseorderTravel(TreeNode * root);

public:
    
    BSTIterator(TreeNode *root);
    
    /** @return whether we have a next smallest number */
    bool hasNext() ;
    
    /** @return the next smallest number */
    int next() ;
};


/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
 
 
void BSTIterator:: reverseorderTravel(TreeNode * root){
    if(root->right){
        reverseorderTravel(root->right);
    }
    this->parent.push(root->val);
    
    if(root->left){
        reverseorderTravel(root->left);
    }
}


BSTIterator:: BSTIterator (TreeNode * root ){
    if(root){
        this->reverseorderTravel(root);
    }
}

bool BSTIterator:: hasNext(){
    
    return !this->parent.empty();
}

int BSTIterator:: next(){
    int val = this->parent.top();
    this->parent.pop();
    return val;
}
