
/* my method: time: O(n^1.5/log(n)), memory: O(n/log(n)) */

public class Solution {
    public boolean isPrime(int k, List<Integer> primes){
        int i = 0;
        while(i<primes.size() && primes.get(i)<= Math.sqrt(k)) {
            if(k%primes.get(i)==0) return false;
            i+=1;
        }
        return true;
    }
    
    public int countPrimes(int n) {
        if(n<2) return 0;
        List<Integer> primes =  new ArrayList<Integer>();
        int k = 2;
        int count = 0;
        while(k<n){
            if(isPrime(k,primes)) {
                primes.add(k);
                count+=1;
            }
            k+=1;
        }
        return count;
        
    }
}

/* Sieve of Eratosthenes: time O(nloglog(n)), memory O(n) */

public int countPrimes(int n) {
        if(n<2) return 0;
        int [] A = new int [n];
        for(int i=2;i<=Math.sqrt(n);i++){
            if(A[i]==0){
                for(int j=i*i;j<n;j+=i){
                    A[j] = 1;
                }
            }
        }
        int count=0;
        for(int i=2;i<n;i++){
            if(A[i]==0) count+=1;
        }
        return count;
    }
